version = 0.1
default-task = 'test'

extensions = [
  'chomp@0.1:assert',
	'chomp@0.1:babel',
	'chomp@0.1:jspm',
  'chomp@0.1:ncc',
  'chomp@0.1:prettier',
	'chomp@0.1:rollup',
  'chomp@0.1:svelte',
  'chomp@0.1:swc',
]

[template-options.npm]
auto-install = true

[[task]]
name = 'test'
serial = true
deps = ['test:init', 'prettier', 'jspm', 'svelte', 'swc', 'babel', 'rollup', 'ncc']

[[task]]
name = 'check'
deps = ['app-build.html', 'lib-swc/test.js', 'test-babel.js']
engine = 'node'
run = '''
  import { readFileSync } from 'fs';
  import assert from 'assert';

  const log = readFileSync('testlog.txt', 'utf8').trim().split(/\r?\n/);
  assert.equal(log.length, 2);
  assert(log.indexOf('unit test a') !== -1);
  assert(log.indexOf('unit test b') !== -1);

  console.log('TESTS OK');
'''

[[task]]
name = 'test:init'
validation = 'none'
run = 'rm -r output'

[[task]]
name = 'prettier'
template = 'prettier'

[[task]]
name = 'jspm'
target = 'output/app-build.html'
dep = 'fixtures/app.html'
template = 'assert'
[task.template-options]
task-template = 'jspm'
expect-match = '''
<!DOCTYPE html>
<!-- Generated by @jspm/generator - https://github.com/jspm/generator -->
<script async src="https://ga\.jspm\.io/npm:es-module-shims@\d+.\d+.\d+/dist/es-module-shims\.js" crossorigin="anonymous"></script>
<script type="importmap">
{
  "imports": {
    "react": "https://ga\.jspm\.io/npm:react@\d+.\d+.\d+/index\.js"
  }
}
</script>
<script type="module">
  import \* as React from "react";
  console.log\(React, oooi\);
</script>
'''

[[task]]
name = 'svelte'
target = 'output/test.js'
deps = ['fixtures/test.svelte']
template = 'assert'
[task.template-options]
task-template = 'svelte'
expect-equals = """/* fixtures/test.svelte generated by Svelte v3.49.0 */
import {
\tSvelteComponent,
\tappend,
\tattr,
\tdetach,
\telement,
\tinit,
\tinsert,
\tlisten,
\tnoop,
\tsafe_not_equal,
\tset_data,
\tspace,
\ttext
} from "svelte/internal";

function create_fragment(ctx) {
\tlet div2;
\tlet div0;
\tlet t1;
\tlet div1;
\tlet t2;
\tlet t3;
\tlet button;
\tlet mounted;
\tlet dispose;

\treturn {
\t\tc() {
\t\t\tdiv2 = element("div");
\t\t\tdiv0 = element("div");
\t\t\tdiv0.textContent = "Message:";
\t\t\tt1 = space();
\t\t\tdiv1 = element("div");
\t\t\tt2 = text(/*msg*/ ctx[0]);
\t\t\tt3 = space();
\t\t\tbutton = element("button");
\t\t\tbutton.textContent = "Change Message";
\t\t\tattr(div1, "class", "message svelte-1sryeut");
\t\t\tattr(div2, "class", "container svelte-1sryeut");
\t\t},
\t\tm(target, anchor) {
\t\t\tinsert(target, div2, anchor);
\t\t\tappend(div2, div0);
\t\t\tappend(div2, t1);
\t\t\tappend(div2, div1);
\t\t\tappend(div1, t2);
\t\t\tinsert(target, t3, anchor);
\t\t\tinsert(target, button, anchor);

\t\t\tif (!mounted) {
\t\t\t\tdispose = listen(button, "click", /*click_handler*/ ctx[1]);
\t\t\t\tmounted = true;
\t\t\t}
\t\t},
\t\tp(ctx, [dirty]) {
\t\t\tif (dirty & /*msg*/ 1) set_data(t2, /*msg*/ ctx[0]);
\t\t},
\t\ti: noop,
\t\to: noop,
\t\td(detaching) {
\t\t\tif (detaching) detach(div2);
\t\t\tif (detaching) detach(t3);
\t\t\tif (detaching) detach(button);
\t\t\tmounted = false;
\t\t\tdispose();
\t\t}
\t};
}

function instance($$self, $$props, $$invalidate) {
\tlet msg = "hello";
\tconst click_handler = () => $$invalidate(0, msg = msg + " hello");
\treturn [msg, click_handler];
}

class Test extends SvelteComponent {
\tconstructor(options) {
\t\tsuper();
\t\tinit(this, options, instance, create_fragment, safe_not_equal, {});
\t}
}

export default Test;"""

[[task]]
name = 'swc'
deps = ['output/lib-swc/test.js', 'output/lib-swc/*.js']
template = 'assert'
[task.template-options]
expect-equals = """
import { dep } from "./dep.js";
console.log(dep);
export var p = 5;\n\n\n//# sourceMappingURL=test.js.map
"""

[[task]]
template = 'swc'
target = 'output/lib-swc/#.js'
dep = 'fixtures/src-swc/#.ts'

[[task]]
name = 'babel'
target = 'output/test-babel.js'
deps = ['fixtures/test.ts']
template = 'assert'
[task.template-options.task-template-options]
presets = ['@babel/preset-typescript']
[task.template-options]
task-template = 'babel'
expect-equals = """
export var p = 5;\n\n//# sourceMappingURL=test-babel.js.map
"""

[[task]]
name = 'rollup'
target = 'output/rollup-dist/test.js'
deps = ['output/lib-swc/*.js']
template = 'assert'
[task.template-options.task-template-options]
outdir = 'output/rollup-dist'
entries = ['output/lib-swc/test.js']
[task.template-options]
task-template = 'rollup'
expect-equals = '''
const dep = "dep";

console.log(dep);
var p = 5;

export { p };
//# sourceMappingURL=test.js.map
'''

[[task]]
name = 'ncc'
target = 'output/ncc/build.js'
dep = 'fixtures/app.js'
template = 'assert'
[task.template-options.task-template-options]
sourceMap = true
[task.template-options]
task-template = 'ncc'
expect-equals = """
/******/ (() => { // webpackBootstrap
/******/ \tvar __webpack_modules__ = ({});
/************************************************************************/
/******/ \t// The module cache
/******/ \tvar __webpack_module_cache__ = {};
/******/ \t
/******/ \t// The require function
/******/ \tfunction __nccwpck_require__(moduleId) {
/******/ \t\t// Check if module is in cache
/******/ \t\tvar cachedModule = __webpack_module_cache__[moduleId];
/******/ \t\tif (cachedModule !== undefined) {
/******/ \t\t\treturn cachedModule.exports;
/******/ \t\t}
/******/ \t\t// Create a new module (and put it into the cache)
/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {
/******/ \t\t\t// no module.id needed
/******/ \t\t\t// no module.loaded needed
/******/ \t\t\texports: {}
/******/ \t\t};
/******/ \t
/******/ \t\t// Execute the module function
/******/ \t\tvar threw = true;
/******/ \t\ttry {
/******/ \t\t\t__webpack_modules__[moduleId](module, module.exports, __nccwpck_require__);
/******/ \t\t\tthrew = false;
/******/ \t\t} finally {
/******/ \t\t\tif(threw) delete __webpack_module_cache__[moduleId];
/******/ \t\t}
/******/ \t
/******/ \t\t// Return the exports of the module
/******/ \t\treturn module.exports;
/******/ \t}
/******/ \t
/************************************************************************/
/******/ \t/* webpack/runtime/compat */
/******/ \t
/******/ \tif (typeof __nccwpck_require__ !== 'undefined') __nccwpck_require__.ab = __dirname + "/";
/******/ \t
/************************************************************************/
var __webpack_exports__ = {};
console.log(readFileSync(__nccwpck_require__.ab + "asset.txt"));

module.exports = __webpack_exports__;
/******/ })()
;
//# sourceMappingURL=app.js.map
"""
